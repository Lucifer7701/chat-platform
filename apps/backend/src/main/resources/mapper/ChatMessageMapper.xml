<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 4. ChatMessageMapper.xml -->
<mapper namespace="com.dating.mapper.ChatMessageMapper">

    <resultMap id="BaseResultMap" type="com.dating.entity.ChatMessage">
        <id property="id" column="id"/>
        <result property="fromUserId" column="from_user_id"/>
        <result property="toUserId" column="to_user_id"/>
        <result property="messageType" column="message_type"/>
        <result property="content" column="content"/>
        <result property="mediaUrl" column="media_url"/>
        <result property="isRead" column="is_read"/>
        <result property="createdAt" column="created_at"/>
        <result column="fromUserNickname" property="fromUserNickname"/>
        <result column="fromUserAvatar" property="fromUserAvatar"/>
    </resultMap>

    <resultMap id="ChatContactResultMap" type="com.dating.dto.ChatContact">
        <result column="contactUserId" property="contactUserId"/>
        <result column="nickname" property="nickname"/>
        <result column="avatar" property="avatar"/>
        <result column="lastMessage" property="lastMessage"/>
        <result column="lastMessageTime" property="lastMessageTime"/>
        <result column="unreadCount" property="unreadCount"/>
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO chat_messages (from_user_id, to_user_id, message_type, content, media_url, is_read)
        VALUES (#{fromUserId}, #{toUserId}, #{messageType}, #{content}, #{mediaUrl}, #{isRead})
    </insert>

    <select id="findBetweenUsers" resultMap="BaseResultMap">
        SELECT * FROM chat_messages
        WHERE (from_user_id = #{userId1} AND to_user_id = #{userId2})
           OR (from_user_id = #{userId2} AND to_user_id = #{userId1})
        ORDER BY created_at DESC
            LIMIT #{offset}, #{limit}
    </select>

    <update id="markAsRead">
        UPDATE chat_messages
        SET is_read = 1
        WHERE to_user_id = #{toUserId} AND from_user_id = #{fromUserId} AND is_read = 0
    </update>

    <delete id="deleteByUserId">
        DELETE FROM chat_messages
        WHERE from_user_id = #{userId} OR to_user_id = #{userId}
    </delete>

    <!-- 清理孤立记录 -->
    <delete id="deleteOrphanedRecords">
        DELETE FROM chat_messages
        WHERE from_user_id NOT IN (
            SELECT id FROM users WHERE status != 3
            ) OR to_user_id NOT IN (
        SELECT id FROM users WHERE status != 3
            )
    </delete>

    <select id="getChatHistory" resultMap="BaseResultMap">
        SELECT cm.*, u.nickname as fromUserNickname, u.avatar as fromUserAvatar
        FROM chat_messages cm
                 LEFT JOIN users u ON cm.from_user_id = u.id
        WHERE (cm.from_user_id = #{userId1} AND cm.to_user_id = #{userId2})
           OR (cm.from_user_id = #{userId2} AND cm.to_user_id = #{userId1})
        ORDER BY cm.created_at ASC
            LIMIT #{offset}, #{limit}
    </select>

    <select id="getUnreadCount" resultType="int">
        SELECT COUNT(*)
        FROM chat_messages
        WHERE to_user_id = #{userId} AND is_read = 0
    </select>

    <select id="getChatContacts" resultMap="ChatContactResultMap">
        SELECT
            contact_info.contactUserId,
            contact_info.nickname,
            contact_info.avatar,
            latest_msg.content as lastMessage,
            latest_msg.created_at as lastMessageTime,
            COALESCE(unread.count, 0) as unreadCount
        FROM (
                 SELECT DISTINCT
                     CASE WHEN from_user_id = #{userId} THEN to_user_id ELSE from_user_id END as contactUserId,
                     u.nickname,
                     u.avatar
                 FROM chat_messages cm
                          LEFT JOIN users u ON (CASE WHEN cm.from_user_id = #{userId} THEN cm.to_user_id ELSE cm.from_user_id END) = u.id
                 WHERE cm.from_user_id = #{userId} OR cm.to_user_id = #{userId}
             ) contact_info
                 LEFT JOIN (
            SELECT
                CASE WHEN from_user_id = #{userId} THEN to_user_id ELSE from_user_id END as contactUserId,
                content,
                created_at,
                ROW_NUMBER() OVER (PARTITION BY CASE WHEN from_user_id = #{userId} THEN to_user_id ELSE from_user_id END ORDER BY created_at DESC) as rn
            FROM chat_messages
            WHERE from_user_id = #{userId} OR to_user_id = #{userId}
        ) latest_msg ON contact_info.contactUserId = latest_msg.contactUserId AND latest_msg.rn = 1
                 LEFT JOIN (
            SELECT from_user_id, COUNT(*) as count
            FROM chat_messages
            WHERE to_user_id = #{userId} AND is_read = 0
            GROUP BY from_user_id
        ) unread ON unread.from_user_id = contact_info.contactUserId
        ORDER BY latest_msg.created_at DESC
    </select>

</mapper>
